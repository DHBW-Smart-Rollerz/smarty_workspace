name: Build and Test Reusable

on:
  workflow_call:
    inputs:
      branch_pattern:
        description: 'Branch pattern to trigger the workflow'
        required: true
        type: string
      type:
        description: 'Type of code to build [python, cpp]'
        default: 'python'
        required: true
        type: string
      package_name:
        description: 'Name of the package to build'
        required: true
        default: 'my_package'
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: osrf/ros:jazzy-desktop
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v3

    - name: 🔧 Install Dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y \
        python3-venv \
        python3-pip \
        catkin-tools \
        python3-colcon-common-extensions \
        git

    - name: 📦 Setup workspace
      run: |
        mkdir -p /ros2_ws/src/${{ inputs.package_name}}
        cp -r $GITHUB_WORKSPACE/* /ros2_ws/src/${{ inputs.package_name}}
        python3 -m venv .venv
        . .venv/bin/activate
        sudo apt install -y ros-dev-tools

        pip install setuptools==73.0.1 \
        empy==3.3.4 \
        lark-parser \
        catkin_pkg \
        numpy

        # Find all dependencies.repos files within the src directory
        cd /ros2_ws
        repos_files=$(find src -type f -name "dependencies.repos")

        # Check if any dependencies.repos files were found
        if [ -z "$repos_files" ]; then
            echo "No dependencies.repos files found in $BASE_DIR."
        else
            echo "Found dependencies.repos files:"
            echo "$repos_files"
        fi

        # Iterate over each found dependencies.repos file and install dependencies
        for repos_file in $repos_files; do
            echo "Installing dependencies from $repos_file"
            vcs import < "$repos_file" src/
        done

        find src/* -maxdepth 3 -name requirements.txt -exec pip install -r {} \;

    - name: 🛠️ Build packages
      run: |
        . .venv/bin/activate
        if [ "${{ inputs.type }}" = "python" ]; then
            echo "Building Python code"
            bash -c "source /opt/ros/jazzy/setup.bash && cd /ros2_ws && colcon build --cmake-args -G "Unix Makefiles" --event-handlers console_cohesion+"
        elif [ "${{ inputs.type }}" = "cpp" ]; then
            echo "Building Cpp code"
            bash -c "source /opt/ros/jazzy/setup.bash && cd /ros2_ws && colcon build --cmake-args -G "Unix Makefiles" -DBUILD_TESTING=ON --event-handlers console_cohesion+"
        else
            echo "Invalid type provided"
            exit 1
        fi

    - name: 🧪 Run tests
      run: |
        . .venv/bin/activate

        if [ "${{ inputs.type }}" = "python" ]; then
            echo "Skipping tests for now"
            # bash -c "source /opt/ros/jazzy/setup.bash && cd /ros2_ws && colcon test --event-handlers console_cohesion+"
        elif [ "${{ inputs.type }}" = "cpp" ]; then
            echo "Testing Cpp code"
            bash -c "source /opt/ros/jazzy/setup.bash && cd /ros2_ws && colcon test --packages-select ${{inputs.package_name}} --event-handlers console_cohesion+"
            bash -c "source /opt/ros/jazzy/setup.bash && cd /ros2_ws && colcon test-result --all"
        else
            echo "Invalid type provided"
            exit 1
        fi

    - name: 🎯 Finish
      run: echo "Build and test finished"
